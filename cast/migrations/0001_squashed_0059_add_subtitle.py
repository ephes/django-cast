# Generated by Django 5.0.6 on 2024-07-20 06:56

import cast.blocks
import cast.models.moderation
import django.db.models.deletion
import django.utils.timezone
import model_utils.fields
import modelcluster.contrib.taggit
import modelcluster.fields
import taggit.managers
import uuid
import wagtail.blocks
import wagtail.embeds.blocks
import wagtail.fields
import wagtail.images.blocks
import wagtail.models.media
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    replaces = [
        ("cast", "0001_initial"),
        ("cast", "0002_remove_blog_description"),
        ("cast", "0003_remove_post_parent_blog"),
        ("cast", "0004_homepage_alias_for_page"),
        ("cast", "0005_auto_20201024_0613"),
        ("cast", "0006_auto_20210628_1628"),
        ("cast", "0007_alter_post_body"),
        ("cast", "0008_auto_20210712_0919"),
        ("cast", "0009_alter_post_body"),
        ("cast", "0010_rename_intro_blog_description"),
        ("cast", "0011_alter_post_body"),
        ("cast", "0012_alter_post_images"),
        ("cast", "0013_alter_gallery_images"),
        ("cast", "0014_remove_gallery_user"),
        ("cast", "0015_delete_blogindexpage"),
        ("cast", "0016_auto_20210830_0422"),
        ("cast", "0017_alter_post_body"),
        ("cast", "0018_alter_chaptermark_start"),
        ("cast", "0019_alter_chaptermark_start"),
        ("cast", "0020_auto_20210926_1556"),
        ("cast", "0021_spamfilter"),
        ("cast", "0022_alter_spamfilter_model"),
        ("cast", "0023_alter_spamfilter_model"),
        ("cast", "0024_alter_homepage_body_alter_post_body"),
        ("cast", "0025_add_performance_indicators"),
        ("cast", "0026_delete_request_alter_post_body"),
        ("cast", "0027_episode"),
        ("cast", "0028_rename_and_drop_itune_fields"),
        ("cast", "0029_add_metadata_field_to_audio"),
        ("cast", "0030_remove_pub_date_is_handled_by_wagtail"),
        ("cast", "0031_remove_timestampedmodel_because_wagtail"),
        ("cast", "0032_remove_timestampedmodel_because_wagtail"),
        ("cast", "0033_add_new_podcast_model"),
        ("cast", "0034_remove_old_podcast_fields_from_blog"),
        ("cast", "0035_remove_new_prefix_podcast_fields"),
        ("cast", "0036_alter_blog_author"),
        ("cast", "0037_alter_episode_block_alter_episode_explicit_and_more"),
        ("cast", "0038_alter_episode_keywords"),
        ("cast", "0039_blog_noindex"),
        ("cast", "0040_alter_blog_noindex"),
        ("cast", "0041_templatebasedirectory"),
        ("cast", "0042_blog_template_base_dir"),
        ("cast", "0043_alter_blog_template_base_dir"),
        ("cast", "0044_alter_blog_template_base_dir_and_more"),
        ("cast", "0045_alter_blog_template_base_dir_and_more"),
        ("cast", "0046_alter_episode_podcast_audio"),
        ("cast", "0047_alter_episode_podcast_audio"),
        ("cast", "0048_added_visible_date_index_for_wagtail_api"),
        ("cast", "0049_added_category_snippets"),
        ("cast", "0050_add_tags_for_posts"),
        ("cast", "0051_use_own_image_chooser_block"),
        ("cast", "0052_alter_blog_template_base_dir_alter_post_body_and_more"),
        ("cast", "0053_rename_default_layout"),
        ("cast", "0054_alter_blog_template_base_dir_and_more"),
        ("cast", "0055_alter_podcast_itunes_artwork"),
        ("cast", "0056_add_cover_image_for_post"),
        ("cast", "0057_rename_cover_image_and_add_alt_text"),
        ("cast", "0058_add_cover_image_to_blog"),
        ("cast", "0059_add_subtitle"),
    ]

    initial = True

    dependencies = [
        ("taggit", "0003_taggeditem_add_unique_index"),
        ("taggit", "0005_auto_20220424_2025"),
        ("wagtailcore", "0052_pagelogentry"),
        ("wagtailcore", "0062_comment_models_and_pagesubscription"),
        ("wagtailcore", "0083_workflowcontenttype"),
        ("wagtailforms", "0004_add_verbose_name_plural"),
        ("wagtailimages", "0023_add_choose_permissions"),
        ("wagtailimages", "0025_alter_image_file_alter_rendition_file"),
        ("wagtailredirects", "0006_redirect_increase_max_length"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Audio",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="modified"
                    ),
                ),
                ("duration", models.DurationField(blank=True, null=True)),
                ("title", models.CharField(blank=True, max_length=255, null=True)),
                ("subtitle", models.CharField(blank=True, max_length=512, null=True)),
                ("m4a", models.FileField(blank=True, null=True, upload_to="cast_audio/")),
                ("mp3", models.FileField(blank=True, null=True, upload_to="cast_audio/")),
                ("oga", models.FileField(blank=True, null=True, upload_to="cast_audio/")),
                ("opus", models.FileField(blank=True, null=True, upload_to="cast_audio/")),
                ("user", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                (
                    "collection",
                    models.ForeignKey(
                        default=wagtail.models.media.get_root_collection_id,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="wagtailcore.collection",
                        verbose_name="collection",
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True, help_text=None, through="taggit.TaggedItem", to="taggit.Tag", verbose_name="tags"
                    ),
                ),
                ("data", models.JSONField(blank=True, default=dict, verbose_name="Metadata")),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ItunesArtWork",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="modified"
                    ),
                ),
                (
                    "original",
                    models.ImageField(
                        height_field="original_height",
                        upload_to="cast_images/itunes_artwork",
                        width_field="original_width",
                    ),
                ),
                ("original_height", models.PositiveIntegerField(blank=True, null=True)),
                ("original_width", models.PositiveIntegerField(blank=True, null=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Video",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="modified"
                    ),
                ),
                ("original", models.FileField(upload_to="cast_videos/")),
                ("poster", models.ImageField(blank=True, null=True, upload_to="cast_videos/poster/")),
                ("poster_seconds", models.FloatField(default=1)),
                ("user", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                (
                    "collection",
                    models.ForeignKey(
                        default=wagtail.models.media.get_root_collection_id,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="wagtailcore.collection",
                        verbose_name="collection",
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True, help_text=None, through="taggit.TaggedItem", to="taggit.Tag", verbose_name="tags"
                    ),
                ),
                ("title", models.CharField(default="", max_length=255)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Gallery",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="modified"
                    ),
                ),
                ("images", models.ManyToManyField(to="wagtailimages.image")),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="File",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="modified"
                    ),
                ),
                ("original", models.FileField(upload_to="cast_files/")),
                ("user", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="HomePage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "body",
                    wagtail.fields.StreamField(
                        [
                            ("heading", wagtail.blocks.CharBlock(form_classname="full title")),
                            ("paragraph", wagtail.blocks.RichTextBlock()),
                            ("image", cast.blocks.CastImageChooserBlock(template="cast/image/image.html")),
                            ("gallery", cast.blocks.GalleryBlock(wagtail.images.blocks.ImageChooserBlock())),
                        ]
                    ),
                ),
                (
                    "alias_for_page",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        help_text="Make this page an alias for another page, redirecting to it with a non permanent redirect.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="aliases_homepage",
                        to="wagtailcore.page",
                        verbose_name="Redirect to another page",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="Blog",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "author",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="Freeform text that will be used in the feed.",
                        max_length=255,
                        null=True,
                    ),
                ),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False)),
                ("email", models.EmailField(blank=True, default=None, max_length=254, null=True)),
                (
                    "comments_enabled",
                    models.BooleanField(
                        default=True,
                        help_text="Whether comments are enabled for this blog.",
                        verbose_name="comments_enabled",
                    ),
                ),
                ("description", wagtail.fields.RichTextField(blank=True)),
                (
                    "noindex",
                    models.BooleanField(
                        default=False,
                        help_text="Whether to add a noindex meta tag to this page and all subpages excluding them from search engines.",
                        verbose_name="noindex",
                    ),
                ),
                (
                    "template_base_dir",
                    models.CharField(
                        blank=True,
                        choices=[("bootstrap4", "Bootstrap 4"), ("plain", "Just HTML")],
                        default=None,
                        help_text="The theme to use for this blog implemented as a template base directory. If not set, the template base directory will be determined by a site setting.",
                        max_length=128,
                        null=True,
                    ),
                ),
                ("cover_alt_text", models.CharField(blank=True, default="", max_length=255)),
                (
                    "cover_image",
                    models.ForeignKey(
                        blank=True,
                        help_text="An optional cover image.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailimages.image",
                    ),
                ),
                (
                    "subtitle",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="The page subtitle as you'd like it to be seen by the public",
                        max_length=255,
                        verbose_name="subtitle",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("wagtailcore.page", models.Model),
        ),
        migrations.CreateModel(
            name="ChapterMark",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("start", models.TimeField(verbose_name="Start time of chaptermark")),
                ("title", models.CharField(max_length=255)),
                ("link", models.URLField(blank=True, max_length=2000, null=True)),
                ("image", models.URLField(blank=True, max_length=2000, null=True)),
                (
                    "audio",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="chaptermarks", to="cast.audio"
                    ),
                ),
            ],
            options={
                "unique_together": {("audio", "start")},
            },
        ),
        migrations.CreateModel(
            name="SpamFilter",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="modified"
                    ),
                ),
                ("name", models.CharField(max_length=128, unique=True)),
                (
                    "model",
                    models.JSONField(
                        decoder=cast.models.moderation.ModelDecoder,
                        default=dict,
                        encoder=cast.models.moderation.ModelEncoder,
                        verbose_name="Spamfilter Model",
                    ),
                ),
                ("performance", models.JSONField(default=dict, verbose_name="Spamfilter Performance Indicators")),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Post",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False)),
                (
                    "visible_date",
                    models.DateTimeField(
                        db_index=True,
                        default=django.utils.timezone.now,
                        help_text="The visible date of the post which is used for sorting.",
                    ),
                ),
                (
                    "comments_enabled",
                    models.BooleanField(default=True, help_text="Whether comments are enabled for this post."),
                ),
                (
                    "body",
                    wagtail.fields.StreamField(
                        [
                            (
                                "overview",
                                wagtail.blocks.StreamBlock(
                                    [
                                        ("heading", wagtail.blocks.CharBlock(form_classname="full title")),
                                        ("paragraph", wagtail.blocks.RichTextBlock()),
                                        (
                                            "code",
                                            wagtail.blocks.StructBlock(
                                                [
                                                    (
                                                        "language",
                                                        wagtail.blocks.CharBlock(
                                                            help_text="The language of the code block"
                                                        ),
                                                    ),
                                                    (
                                                        "source",
                                                        wagtail.blocks.TextBlock(
                                                            help_text="The source code of the block", rows=8
                                                        ),
                                                    ),
                                                ],
                                                icon="code",
                                            ),
                                        ),
                                        (
                                            "image",
                                            wagtail.images.blocks.ImageChooserBlock(template="cast/image/image.html"),
                                        ),
                                        (
                                            "gallery",
                                            cast.blocks.GalleryBlock(wagtail.images.blocks.ImageChooserBlock()),
                                        ),
                                        ("embed", wagtail.embeds.blocks.EmbedBlock()),
                                        (
                                            "video",
                                            cast.blocks.VideoChooserBlock(
                                                icon="media", template="cast/video/video.html"
                                            ),
                                        ),
                                        (
                                            "audio",
                                            cast.blocks.AudioChooserBlock(
                                                icon="media", template="cast/audio/audio.html"
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "detail",
                                wagtail.blocks.StreamBlock(
                                    [
                                        ("heading", wagtail.blocks.CharBlock(form_classname="full title")),
                                        ("paragraph", wagtail.blocks.RichTextBlock()),
                                        (
                                            "code",
                                            wagtail.blocks.StructBlock(
                                                [
                                                    (
                                                        "language",
                                                        wagtail.blocks.CharBlock(
                                                            help_text="The language of the code block"
                                                        ),
                                                    ),
                                                    (
                                                        "source",
                                                        wagtail.blocks.TextBlock(
                                                            help_text="The source code of the block", rows=8
                                                        ),
                                                    ),
                                                ],
                                                icon="code",
                                            ),
                                        ),
                                        (
                                            "image",
                                            wagtail.images.blocks.ImageChooserBlock(template="cast/image/image.html"),
                                        ),
                                        (
                                            "gallery",
                                            cast.blocks.GalleryBlock(wagtail.images.blocks.ImageChooserBlock()),
                                        ),
                                        ("embed", wagtail.embeds.blocks.EmbedBlock()),
                                        (
                                            "video",
                                            cast.blocks.VideoChooserBlock(
                                                icon="media", template="cast/video/video.html"
                                            ),
                                        ),
                                        (
                                            "audio",
                                            cast.blocks.AudioChooserBlock(
                                                icon="media", template="cast/audio/audio.html"
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                        ]
                    ),
                ),
                ("audios", models.ManyToManyField(blank=True, to="cast.audio")),
                ("galleries", models.ManyToManyField(blank=True, to="cast.gallery")),
                ("images", models.ManyToManyField(blank=True, to="wagtailimages.image")),
                ("videos", models.ManyToManyField(blank=True, to="cast.video")),
            ],
            options={
                "abstract": False,
            },
            bases=("wagtailcore.page", models.Model),
        ),
        migrations.CreateModel(
            name="Episode",
            fields=[
                (
                    "post_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="cast.post",
                    ),
                ),
                (
                    "keywords",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="A comma-delimited-list of up to 12 words for iTunes\n            searches. Perhaps include misspellings of the title.",
                        max_length=255,
                    ),
                ),
                (
                    "explicit",
                    models.PositiveSmallIntegerField(
                        choices=[(1, "yes"), (2, "no"), (3, "clean")],
                        default=1,
                        help_text="``Clean`` will put the clean iTunes graphic by it.",
                    ),
                ),
                (
                    "block",
                    models.BooleanField(
                        default=False,
                        help_text="Check to block this episode from iTunes because <br />its content might cause the entire show to be <br />removed from iTunes.",
                    ),
                ),
                (
                    "podcast_audio",
                    models.ForeignKey(
                        blank=True,
                        help_text="The audio file for this episode -if this is not set, the episode will not be included in the feed.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="episodes",
                        to="cast.audio",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("cast.post",),
        ),
        migrations.CreateModel(
            name="PostCategory",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(help_text="The name for this category", max_length=255, unique=True)),
                (
                    "slug",
                    models.SlugField(
                        help_text="A slug to identify posts by this category", unique=True, verbose_name="slug"
                    ),
                ),
            ],
            options={
                "verbose_name": "Post Category",
                "verbose_name_plural": "Post Categories",
                "ordering": ["name"],
            },
        ),
        migrations.AddField(
            model_name="post",
            name="categories",
            field=modelcluster.fields.ParentalManyToManyField(blank=True, to="cast.postcategory"),
        ),
        migrations.CreateModel(
            name="PostTag",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "content_object",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="tagged_items", to="cast.post"
                    ),
                ),
                (
                    "tag",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_items",
                        to="taggit.tag",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="post",
            name="tags",
            field=modelcluster.contrib.taggit.ClusterTaggableManager(
                blank=True,
                help_text="A comma-separated list of tags.",
                through="cast.PostTag",
                to="taggit.Tag",
                verbose_name="tags",
            ),
        ),
        migrations.CreateModel(
            name="TemplateBaseDirectory",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "name",
                    models.CharField(
                        choices=[("bootstrap4", "Bootstrap 4"), ("plain", "Just HTML")],
                        default="bootstrap4",
                        help_text="The theme to use for this site implemented as a template base directory. It's possible to overwrite this setting for each blog.If you want to use a custom theme, you have to create a new directory in your template directory named cast/<your-theme-name>/ and put all required templates in there.",
                        max_length=128,
                    ),
                ),
                (
                    "site",
                    models.OneToOneField(
                        editable=False, on_delete=django.db.models.deletion.CASCADE, to="wagtailcore.site"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Podcast",
            fields=[
                (
                    "blog_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="cast.blog",
                    ),
                ),
                (
                    "itunes_categories",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="A json dict of itunes categories pointing to lists of subcategories. Taken from this list https://validator.w3.org/feed/docs/error/InvalidItunesCategory.html",
                        max_length=512,
                        verbose_name="itunes_categories",
                    ),
                ),
                (
                    "keywords",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="A comma-delimited list of up to 12 words for iTunes\n            searches. Perhaps include misspellings of the title.",
                        max_length=255,
                        verbose_name="keywords",
                    ),
                ),
                (
                    "explicit",
                    models.PositiveSmallIntegerField(
                        choices=[(1, "yes"), (2, "no"), (3, "clean")],
                        default=1,
                        help_text="``Clean`` will put the clean iTunes graphic by it.",
                        verbose_name="explicit",
                    ),
                ),
                (
                    "itunes_artwork",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="podcasts",
                        to="cast.itunesartwork",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("cast.blog",),
        ),
        migrations.AddField(
            model_name="post",
            name="cover_image",
            field=models.ForeignKey(
                blank=True,
                help_text="An optional cover image.",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to="wagtailimages.image",
            ),
        ),
        migrations.AddField(
            model_name="post",
            name="cover_alt_text",
            field=models.CharField(blank=True, default="", max_length=255),
        ),
        migrations.AlterField(
            model_name="post",
            name="body",
            field=wagtail.fields.StreamField(
                [
                    (
                        "overview",
                        wagtail.blocks.StreamBlock(
                            [
                                ("heading", wagtail.blocks.CharBlock(form_classname="full title")),
                                ("paragraph", wagtail.blocks.RichTextBlock()),
                                (
                                    "code",
                                    wagtail.blocks.StructBlock(
                                        [
                                            (
                                                "language",
                                                wagtail.blocks.CharBlock(help_text="The language of the code block"),
                                            ),
                                            (
                                                "source",
                                                wagtail.blocks.TextBlock(
                                                    help_text="The source code of the block", rows=8
                                                ),
                                            ),
                                        ],
                                        icon="code",
                                    ),
                                ),
                                ("image", cast.blocks.CastImageChooserBlock(template="cast/image/image.html")),
                                (
                                    "gallery",
                                    wagtail.blocks.StructBlock(
                                        [
                                            (
                                                "gallery",
                                                cast.blocks.GalleryBlock(cast.blocks.GalleryImageChooserBlock()),
                                            ),
                                            (
                                                "layout",
                                                wagtail.blocks.ChoiceBlock(
                                                    choices=[
                                                        ("default", "Web Component with Modal"),
                                                        ("htmx", "HTMX based layout"),
                                                    ]
                                                ),
                                            ),
                                        ]
                                    ),
                                ),
                                ("embed", wagtail.embeds.blocks.EmbedBlock()),
                                (
                                    "video",
                                    cast.blocks.VideoChooserBlock(icon="media", template="cast/video/video.html"),
                                ),
                                (
                                    "audio",
                                    cast.blocks.AudioChooserBlock(icon="media", template="cast/audio/audio.html"),
                                ),
                            ]
                        ),
                    ),
                    (
                        "detail",
                        wagtail.blocks.StreamBlock(
                            [
                                ("heading", wagtail.blocks.CharBlock(form_classname="full title")),
                                ("paragraph", wagtail.blocks.RichTextBlock()),
                                (
                                    "code",
                                    wagtail.blocks.StructBlock(
                                        [
                                            (
                                                "language",
                                                wagtail.blocks.CharBlock(help_text="The language of the code block"),
                                            ),
                                            (
                                                "source",
                                                wagtail.blocks.TextBlock(
                                                    help_text="The source code of the block", rows=8
                                                ),
                                            ),
                                        ],
                                        icon="code",
                                    ),
                                ),
                                ("image", cast.blocks.CastImageChooserBlock(template="cast/image/image.html")),
                                (
                                    "gallery",
                                    wagtail.blocks.StructBlock(
                                        [
                                            (
                                                "gallery",
                                                cast.blocks.GalleryBlock(cast.blocks.GalleryImageChooserBlock()),
                                            ),
                                            (
                                                "layout",
                                                wagtail.blocks.ChoiceBlock(
                                                    choices=[
                                                        ("default", "Web Component with Modal"),
                                                        ("htmx", "HTMX based layout"),
                                                    ]
                                                ),
                                            ),
                                        ]
                                    ),
                                ),
                                ("embed", wagtail.embeds.blocks.EmbedBlock()),
                                (
                                    "video",
                                    cast.blocks.VideoChooserBlock(icon="media", template="cast/video/video.html"),
                                ),
                                (
                                    "audio",
                                    cast.blocks.AudioChooserBlock(icon="media", template="cast/audio/audio.html"),
                                ),
                            ]
                        ),
                    ),
                ]
            ),
        ),
    ]
